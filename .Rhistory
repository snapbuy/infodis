install.packages(`torch`)
install.packages(`pytorch`)
demo(images)
demo()
demo(image())
install.packages("torch")
install.packages("tidyverse")
library(torch)
x <- torch_empty(5, 3)
torch_tensor()
x
dim(x)
rand_tensor <- torch_rand(5, 3)
rnad_tensor
rand_tensor
cuda_is_available()
library(torch)
install_torch("ggplot2")
install_torch("ggplot")
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
install.packages(c("boot", "broom", "class", "cli", "cluster", "codetools", "foreign", "KernSmooth", "lubridate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "pkgload", "rmarkdown", "spatial", "tibble"))
install.packages(c("boot", "broom", "class", "cli", "cluster", "codetools", "foreign", "KernSmooth", "lubridate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "pkgload", "rmarkdown", "spatial", "tibble"))
install.packages(c("farver", "ps", "tidyr"))
install.packages(c("farver", "ps", "tidyr"))
q()
install.packages(c("desc", "dplyr", "isoband", "pillar", "rvest", "tinytex", "waldo"))
install.packages("tsibbledata")
library(tidyverse)
library(lubridate)
library(feasts) # Feature Extraction and Statistics for Time Series
library(tsibbledata) # Diverse Datasets for 'tsibble'
vic_elec %>% glimpse()
vic_elec_2014 <-  vic_elec %>%
filter(year(Date) == 2014) %>%
select(-c(Date, Holiday)) %>%
mutate(Demand = scale(Demand), Temperature = scale(Temperature)) %>%
pivot_longer(-Time, names_to = "variable") %>%
update_tsibble(key = variable)
vic_elec_2014 %>% filter(month(Time) == 7) %>%
autoplot() +
scale_colour_manual(values = c("#08c5d1", "#00353f")) +
theme_minimal()
library(tidyverse)
install.packages(c("utf8", "xfun"))
library(palmerpenguins)
+
install.packages("devtools")
library(palmerpenguins)
install.packages("devtools")
library(palmerpenguins)
devtools::install_github("allisonhorst/")
devtools::install_github("allisonhorst/palemrpanguins")
clear()
devtools::install_github("allisonhorst/palemrpanguins")
devtools::install_github("xiaodaigh/disk.frame")
devtools::install_github("xiaodaigh/disk.frame")
# tidy한 방법으로 데이터 다루기
## 패키지 설치
install.packages("tidyverse")
### github에 있는 패키지를 설치하기 위한 패키지 설치
install.packages("remotes")
### github에 있는 패키지를 설치하기 위한 패키지 설치
install.packages("devtools")
install.packages(c("benchmarkme", "broom", "callr", "cli", "cpp11", "dbplyr", "diffobj", "disk.frame", "fabletools", "feasts", "gert", "gh", "pkgload", "processx", "reprex", "slider", "survival", "tinytex", "tsibbledata", "vctrs"))
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
install.packages("keras")
install.packages("mlbench")
install.packages(neuralnet)
install.packages("neuralnet")
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
data("BostonHousing")
data <- BostonHousing
str(data)
n <- neuralnet(medv ~ crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+b+lstat,
data = data,
hidden = c(12,7),
linear.output = F,
lifesign = 'full',
rep=1)
plot(n,col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
install.packages("quantmod")
library(quantmod)
getSymbols('AAPL')
head(AAPL)
View(AAPL)
getSymbols('SPY')
head(SPY)
tail(SPY)
chart_Series(Ad(SPY))
chart_Series(Ad(AAPL))
chart_Series(Ad(SPY))
library(quantmod)
getSymbols('DGS10', src = 'FRED')
DGS10 %>% chart_Series()
library(magrittr)
DGS10 %>% chart_Series()
View(DGS10)
View(DGS10)
setwd("/Volumes/T7/infodis")
df <- read.csv("arxTest.csv", header=TRUE, fileEncoding = "utf-8")
summary(df)
# Quasi-Identifier: age, workclass, marital_status, race, sex, native_country
# sensitive variable: salary_class
library(sqldf)
freq <- sqldf("select count(*) from df group by age, workclass, marital_status, race, sex, native_country")
table(freq$`count(*)`)
sqldf("select age, count(*) from df group by age")
sqldf("select workclass, count(*) from df group by workclass")
sqldf("select marital_status, count(*) from df group by marital_status")
sqldf("select race, count(*) from df group by race")
sqldf("select sex, count(*) from df group by sex")
sqldf("select native_country, count(*) from df group by native_country")
library(gmodels)
CrossTable(x = df$workclass, y = df$salary_class, prop.t=FALSE, expected=TRUE, chisq =TRUE)
CrossTable(x = df$marital_status, y = df$salary_class, prop.t=FALSE, expected=TRUE, chisq =TRUE)
CrossTable(x = df$race, y = df$salary_class, prop.t=FALSE, expected=TRUE, chisq =TRUE)
CrossTable(x = df$sex, y = df$salary_class, prop.t=FALSE, expected=TRUE, chisq =TRUE)
CrossTable(x = df$native_country, y = df$salary_class, prop.t=FALSE, expected=TRUE, chisq =TRUE)
install.packages("tcltk")
library(tcltk)
